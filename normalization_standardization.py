# -*- coding: utf-8 -*-
"""normalization_standardization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dDrYdErMy5o0mFIHMVX6frZUM-oZiui-
"""

numbers=[2,3,4,5,6,6]
n=len(numbers)
total_sum=sum(numbers)
mean=total_sum/n

print(mean)

print("Mean is: "+str(mean))

numbers.sort()

if n%2 == 0:
    median1=numbers[n//2]
    median2=numbers[n//2 - 1]
    median=(median1+median2)/2
else:
    median=numbers[n//2]

print(median)

from collections import Counter
data = Counter(numbers)
get_mode = dict(data)
mode = [k for k, v in get_mode.items() if v == max(list(data.values()))]
  
if len(mode) == n:
    get_mode = "No mode found"
else:
    get_mode = "Mode is / are: " + ', '.join(map(str, mode))

print(mode)

def variance(numbers):
    n=len(numbers)
    mean=sum(numbers)/n
    deviations=[(X-mean)**2 for X in numbers]
    variance=sum(deviations)/n
    return variance

variance([3,6,8,9,2,5,8,1])

import math
def std_dev(numbers):
    var=variance(numbers)
    stddev=math.sqrt(var)
    return stddev

std_dev([4,7,9,2,6,8,5])





#normalization
n_list=[1,2,423,6,4576]
list_min=min(n_list)
list_max=max(n_list)
for X in n_list:
    normalization=(X-list_min)/(list_max - list_min)
    print("{}:{}".format(X,normalization))

n_list=[1,4,6,87,8,9]
n=len(n_list)
t_sum=sum(n_list)
mean=t_sum/n
for X in n_list:
    stddization=(X-mean)/std_dev(numbers)
    print("{}:{}".format(X,stddization))

#Standardization
import math
a=[1,4,6,87,8,9]
mean=sum(a)/len(a)
var=sum([((i-mean)**2) for i in a])/len(a)
sd=var**0.5
for x in a:
    s=(x-mean)/sd
    print("{}:{}".format(x,s))





